package com.lambdaschool.foundation.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * The entity allowing interaction with the attendees table
 * <p>
 * requires each combination of attendee and potluck to be unique. The same attendee id cannot be assigned to the same user more than once.
 */
@Entity
@Table(name = "potlucks")
public class Potluck extends Auditable {

  /**
   * The primary key (long) of the potlucks table
   */
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private long potluckid;

  /**
   * Name of the potluck. Cannot be null, must be unique
   */
  @Column(nullable = false, unique = true)
  private String potluckname;

  /**
   * Date of the potluck. Cannot be null.
   */
  @Column(nullable = true)
  private String date;

  /**
   * Time of the potluck. Cannot be null.
   */
  @Column(nullable = true)
  private String time;

  /**
   * Location of the potluck. Cannot be null.
   */
  @Column(nullable = true)
  private String location;

  /**
   * Part of the join relationship between potluck and attendee
   * connects potlucks to the potluck user combination, called attendee
   */
  @OneToMany(mappedBy = "potluck",
      cascade = CascadeType.ALL,
      orphanRemoval = true)
  @JsonIgnoreProperties(value={"potlucks","potluck","items","Attendees", "user", "roles"},
      allowSetters = true)
  private Set<Attendee> attendees = new HashSet<>();

  /**
   * The userid of the main user or host assigned to this potluck is what is stored in the database.
   * This is the entire user object!
   * <p>
   * Forms a Many to One relationship between potlucks and users.
   * A user can have many potlucks.
   */
  @ManyToOne
  @JoinColumn(name = "userid",
      nullable = false)
  @JsonIgnoreProperties(value={"potlucks","potluck","items","Attendees", "user", "roles"},
      allowSetters = true)
  private User user;

  /**
   * Part of the join relationship between potluck and items
   * connects potlucks to items
   */
  @OneToMany(mappedBy = "potluck",
      cascade = CascadeType.ALL,
      orphanRemoval = true)
  @JsonIgnoreProperties(value={"potlucks","potluck","items","Attendees", "user", "roles"},
      allowSetters = true)
  private List<Item> items = new ArrayList<>();

  /**
   * Default constructor used primarily by the JPA.
   */
  public Potluck() {
  }

  /**
   * Given the params, create a new potluck object
   * <p>
   * userid is autogenerated
   *
   * @param potluckname The name (String) of the potluck
   * @param date        The date (String) of the potluck
   * @param time        The time (String) of the potluck
   * @param location    The location (String) of the potluck
   */
  public Potluck(String potluckname, String date, String time, String location) {
    this.potluckname = potluckname;
    this.date = date;
    this.time = time;
    this.location = location;
  }

  public long getPotluckid() {
    return potluckid;
  }

  public void setPotluckid(long id) {
    this.potluckid = id;
  }

  public String getPotluckname() {
    return potluckname;
  }

  public void setPotluckname(String potluckname) {
    this.potluckname = potluckname;
  }

  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public Set<Attendee> getAttendees() {
    return attendees;
  }

  public void setAttendees(Set<Attendee> attendees) {
    this.attendees = attendees;
  }

  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }

  public List<Item> getItems() {
    return items;
  }

  public void setItems(ArrayList<Item> items) {
    this.items = items;
  }
}
